{"version":3,"file":"static/js/983.5a85d668.chunk.js","mappings":"iOAGaA,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4B,SCEb,SAASE,EAAT,GAAkC,IAAbC,EAAY,EAAZA,KAAMC,EAAM,EAANA,GAChCC,GAAWC,EAAAA,EAAAA,MACjB,OACI,yBACI,SAACP,EAAD,CAA0BQ,GAAE,kBAAaH,GAAMI,MAAO,CAACC,KAAMJ,GAA7D,SAAyEF,GAAnDC,IAGjC,CCVM,IAAMM,EAAkBV,EAAAA,GAAAA,GAAH,wBCKb,SAASW,EAAT,GAAqE,IAAD,IAA9CC,OAAAA,OAA8C,MAArC,GAAqC,MAAjCC,UAAAA,OAAiC,aAAdC,MAAAA,OAAc,MAAN,GAAM,EAE/E,OACI,iCACI,SAACJ,EAAD,WACW,OAANE,QAAM,IAANA,OAAA,EAAAA,EAAQG,QAAS,GAAKH,EAAOI,KAAI,SAAAC,GAAI,aAAI,SAACf,EAAD,CAAyBE,GAAIa,EAAKb,GAAID,KAAI,UAAEc,EAAKd,YAAP,QAAec,EAAKC,OAA9CD,EAAKb,GAAzB,MAEzCS,IAAa,SAACM,EAAA,EAAD,IACbL,IAAS,qCAAaA,EAAMM,aAGxC,C,yGCaD,UA1BA,WACE,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOP,EAAP,KAAcQ,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOR,EAAP,KAAkBU,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOT,EAAP,KAAeY,EAAf,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FAClBH,GAAa,GADK,kBAGKI,EAAAA,KAHL,OAGZC,EAHY,OAIlBJ,EAAUI,EAASC,SAJD,gDAMlBP,EAAS,EAAD,IANU,yBAQhBC,GAAa,GARG,4EAAH,qDAYjBG,GACC,GAAE,KAGH,SAAC,IAAD,CAAYd,OAAQA,EAAQE,MAAOA,EAAOD,UAAWA,GAExD,C,8LC3BKiB,EAAO,mCAEAC,EAAc,mCAAG,6FACpBC,EAAS,CACXC,IAAK,kDACLC,OAAQ,CACJC,QAASL,IAJS,UAOHM,EAAAA,EAAAA,GAAMJ,GAPH,cAOpBJ,EAPoB,yBAQnBA,EAASS,MARU,2CAAH,qDAWdC,EAAa,mCAAG,WAAOnC,GAAP,8FAAaoC,EAAb,+BAAoB,EACvCP,EAAS,CACXC,IAAK,4CACLC,OAAQ,CACJC,QAASL,EACTU,SAAU,QACVD,KAAMA,EACNE,MAAOtC,IAPU,UAUFiC,EAAAA,EAAAA,GAAMJ,GAVJ,cAUnBJ,EAVmB,yBAWlBA,EAASS,MAXS,2CAAH,sDAcbK,EAAS,mCAAG,WAAOC,GAAP,gFACfX,EAAS,CACXC,IAAI,sCAAD,OAAwCU,GAC3CT,OAAQ,CACJC,QAASL,EACTU,SAAU,UALG,UAQEJ,EAAAA,EAAAA,GAAMJ,GARR,cAQfJ,EARe,yBASdA,EAASS,MATK,2CAAH,sDAYTO,EAAY,mCAAG,WAAOD,GAAP,gFAClBX,EAAS,CACXC,IAAI,sCAAD,OAAwCU,EAAxC,YACHT,OAAQ,CACJC,QAASL,EACTU,SAAU,UALM,UAQDJ,EAAAA,EAAAA,GAAMJ,GARL,cAQlBJ,EARkB,yBASjBA,EAASS,MATQ,2CAAH,sDAYZQ,EAAY,mCAAG,WAAOF,GAAP,gFAClBX,EAAS,CACXC,IAAI,sCAAD,OAAwCU,EAAxC,YACHT,OAAQ,CACJC,QAASL,EACTU,SAAU,QACVD,KAAM,IANU,UASDH,EAAAA,EAAAA,GAAMJ,GATL,cASlBJ,EATkB,yBAUjBA,EAASS,MAVQ,2CAAH,qD","sources":["components/MovieItem/MovieItem.styled.jsx","components/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage.jsx","services/moviedbAPI.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledMovieItem = styled(NavLink)`\n  \n`;","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { StyledMovieItem } from './MovieItem.styled';\n\nexport default function MovieItem({ name, id }) {\n    const location = useLocation();\n    return (\n        <li>\n            <StyledMovieItem key={id} to={`/movies/${id}`} state={{from: location}}>{name}</StyledMovieItem>\n      </li>\n  )\n}\n\nMovieItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n}\n","import styled from 'styled-components';\n\nexport const StyledMovieList = styled.ul`\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Loader from 'components/Loader/Loader';\nimport MovieItem from 'components/MovieItem/MovieItem';\nimport { StyledMovieList } from './MoviesList.styled';\n\nexport default function MoviesList({ movies = [], isLoading = false, error = '' }) {\n\n    return (\n        <>\n            <StyledMovieList>\n                {movies?.length > 0 && movies.map(item => <MovieItem key={item.id} id={item.id} name={item.name ?? item.title} />)}\n            </StyledMovieList>\n            {isLoading && <Loader />}\n            {error && <div>Error: {error.message}</div>}\n      </>\n  )\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.array,\n    isLoading: PropTypes.bool,\n    error: PropTypes.string,\n}\n","import React, { useEffect, useState } from 'react';\nimport * as MovieAPI from '../services/moviedbAPI';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nfunction HomePage() {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setIsLoading(true);\n      try {\n      const response = await MovieAPI.trendingMovies();\n      setMovies(response.results);\n    } catch (e) {\n      setError(e);\n    } finally {\n        setIsLoading(false);\n    }\n    }\n    \n    fetchMovies();\n    }, []);\n\n  return (\n    <MoviesList movies={movies} error={error} isLoading={isLoading}/>\n  );\n}\n\nexport default HomePage;","import axios from 'axios';\n\nconst API_KEY = `8dee51c91a52c88890f609d5b0af0b1a`;\n\nexport const trendingMovies = async () => {\n    const config = {\n        url: 'https://api.themoviedb.org/3/trending/movie/day',\n        params: {\n            api_key: API_KEY,\n        }\n}\n    const response = await axios(config);\n    return response.data;\n};\n\nexport const moviesByQuery = async (name, page = 1) => {\n    const config = {\n        url: 'https://api.themoviedb.org/3/search/movie',\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            page: page,\n            query: name\n        }\n    }\n    const response = await axios(config);\n    return response.data;\n};\n\nexport const movieById = async (movie_id) => {\n    const config = {\n        url: `https://api.themoviedb.org/3/movie/${movie_id}`,\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n        }\n    }\n    const response = await axios(config);\n    return response.data;\n};\n\nexport const movieCredits = async (movie_id) => {\n    const config = {\n        url: `https://api.themoviedb.org/3/movie/${movie_id}/credits`,\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n        }\n    }\n    const response = await axios(config);\n    return response.data;\n};\n\nexport const movieReviews = async (movie_id) => {\n    const config = {\n        url: `https://api.themoviedb.org/3/movie/${movie_id}/reviews`,\n        params: {\n            api_key: API_KEY,\n            language: 'en-US',\n            page: 1,\n        }\n    }\n    const response = await axios(config);\n    return response.data; \n};"],"names":["StyledMovieItem","styled","NavLink","MovieItem","name","id","location","useLocation","to","state","from","StyledMovieList","MoviesList","movies","isLoading","error","length","map","item","title","Loader","message","useState","setError","setIsLoading","setMovies","useEffect","fetchMovies","MovieAPI","response","results","API_KEY","trendingMovies","config","url","params","api_key","axios","data","moviesByQuery","page","language","query","movieById","movie_id","movieCredits","movieReviews"],"sourceRoot":""}